apiVersion: apps/v1
kind: Deployment
metadata:
  name: ourlib-deployment
spec:
  replicas: {{ .Values.app.deployment.replicaCount }}  #Adjust the number of replicas as needed
  selector:
    matchLabels:
      app: ourlib
  template:
    metadata:
      labels:
        app: ourlib
    spec:
      containers:
      - name: ourlib-container
        image: "{{ .Values.app.deployment.image.rep }}:{{ .Values.app.deployment.image.tag }}" 
        imagePullPolicy: {{.Values.app.deployment.image.pullPolicy}}
        ports:
        - containerPort: 8000 # could also call from the port in the env section 
        resources:
          requests:
            memory: "64Mi"  # Request 64 megabytes of memory
            cpu: "250m"      # Request 250 milliCPU (0.25 CPU core)
          limits:
            memory: "128Mi"  # Limit memory usage to 128 megabytes
            cpu: "500m"      # Limit CPU usage to 500 milliCPU (0.5 CPU core)     
        #Replace data in the .env folder of both backend and frontend 
        env:
        - name: JWT_KEY
          valueFrom:
            secretKeyRef:
              name: ourlib-secret
              key: JWT_KEY
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: ourlib-secret
              key: MONGO_URL
        - name: DNS_ADDRESS
          valueFrom:
            configMapKeyRef:
              name: ourlib-config
              key: DNS_ADDRESS
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: ourlib-config
              key: DATABASE_NAME
        # readinessProbe:  # Add a readiness probe here
        #   httpGet:
        #     path: /  # You can customize this path based on your MongoDB pod's readiness check
        #     port: 27017 #MongoDB readiness check port, this is hardcoded because it's just the standard mongo port 
        #   initialDelaySeconds: 15  # Delay the probe until after the container has started
        #   periodSeconds: 10  # Check every 10 seconds